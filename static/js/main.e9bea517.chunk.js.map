{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","reorderedArr","goods","visibleGoods","LENGTH","sort","good1","good2","length","ALPABET","localeCompare","Error","reverse","getReorderedGoods","isOrderSame","className","type","onClick","classNames","current","map","item","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KA6CE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAtCD,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUH,EACZ,EADYA,WAERO,EAAY,YAAOD,GAEvB,OAAQH,GACN,KAAKP,EAASY,OACZD,EAAaE,MAAK,SAACC,EAAOC,GACxB,OAAOD,EAAME,OAASD,EAAMC,UAE9B,MAEF,KAAKhB,EAASiB,QACZN,EAAaE,MAAK,SAACC,EAAOC,GACxB,OAAOD,EAAMI,cAAcH,MAE7B,MAEF,KAAKf,EAASM,KACZK,EAAY,UAAOV,GACnB,MAEF,QACE,MAAM,IAAIkB,MAAM,yBAOpB,OAJIf,GACFO,EAAaS,UAGRT,EAOcU,CACnBpB,EAAiB,CAAEM,WAAUH,eAGzBkB,IAAgBf,IAAaP,EAASM,OAASF,GAErD,OACE,sBAAKmB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMjB,EAAYR,EAASiB,UACpCM,UAAWG,IACT,SACA,UACA,CAAE,WAAYnB,IAAaP,EAASiB,UANxC,iCAYA,wBACEO,KAAK,SACLC,QAAS,kBAAMjB,EAAYR,EAASY,SACpCW,UAAWG,IACT,SACA,aACA,CAAE,WAAYnB,IAAaP,EAASY,SANxC,4BAYA,wBACEY,KAAK,SACLC,QAAS,kBAAMpB,GAAc,SAAAsB,GAAO,OAAKA,MACzCJ,UAAWG,IACT,SACA,aACA,CAAE,YAAatB,IANnB,qBAYCkB,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVE,QAAS,WACPpB,GAAc,GACdG,EAAYR,EAASM,OALzB,sBAaJ,6BACE,6BACGG,EAAamB,KAAI,SAACC,GAAD,OAChB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,cC9HrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e9bea517.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  let visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.LENGTH:\n      visibleGoods.sort((good1, good2) => {\n        return good1.length - good2.length;\n      });\n      break;\n\n    case SortType.ALPABET:\n      visibleGoods.sort((good1, good2) => {\n        return good1.localeCompare(good2);\n      });\n      break;\n\n    case SortType.NONE:\n      visibleGoods = [...goodsFromServer];\n      break;\n\n    default:\n      throw new Error('Type is not supported');\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const reorderedArr = getReorderedGoods(\n    goodsFromServer, { sortType, isReversed },\n  );\n\n  const isOrderSame = !(sortType === SortType.NONE && !isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortType(SortType.ALPABET)}\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPABET },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortType(SortType.LENGTH)}\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setIsReversed(current => !current)}\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n        >\n          Reverse\n        </button>\n\n        {isOrderSame && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setIsReversed(false);\n              setSortType(SortType.NONE);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {reorderedArr.map((item: string) => (\n            <li key={item} data-cy=\"Good\">{item}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}